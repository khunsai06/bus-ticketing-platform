// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CONSUMER
  ADMIN
  OPERATOR
}

model Credential {
  id                String             @id @default(cuid())
  uname             String?            @unique
  email             String?            @unique
  passwd            String
  userType          UserType
  operatorPersonnel OperatorPersonnel?
  consumer          Consumer?
  admin             Admin?

  @@map("credentials")
}

model Consumer {
  id           String         @id @default(cuid())
  name         String
  dob          DateTime       @db.Date
  gender       String
  phone        String
  cid          String         @unique
  credential   Credential     @relation(fields: [cid], references: [id])
  Cancellation Cancellation[]
  Reservation  Reservation[]

  @@map("consumers")
}

model Admin {
  id         String     @id @default(cuid())
  cid        String     @unique
  credential Credential @relation(fields: [cid], references: [id])

  @@map("admins")
}

model OperatorPersonnel {
  id         String     @id @default(cuid())
  cid        String     @unique
  credential Credential @relation(fields: [cid], references: [id])
  operatorId String
  operator   Operator   @relation(fields: [operatorId], references: [id])

  @@map("operator_personnel")
}

model Operator {
  id                String              @id @default(cuid())
  name              String              @unique
  registrationEmail String              @unique
  logo              String?
  background        String?
  supportContacts   String[]
  associates        OperatorPersonnel[]
  trips             Trip[]

  @@map("operators")
}

model Trip {
  id                String     @id @default(cuid())
  title             String
  departureLocation String
  arrivalLocation   String
  intermediateStops String?
  distance          Float?
  departureTime     DateTime
  arrivalTime       DateTime
  price             Decimal    @db.Money
  additional        String?
  status            TripStatus @default(IDLE)

  operatorId String
  operator   Operator @relation(fields: [operatorId], references: [id])
  seats      Seat[]

  @@map("trips")
}

enum TripStatus {
  IDLE
  LAUNCHED
  WITHDRAWN
}

model Seat {
  id            String         @id @default(cuid())
  identifier    String
  status        SeatStatus     @default(FREE)
  additional    String?
  tripId        String
  trip          Trip           @relation(fields: [tripId], references: [id], onDelete: Cascade)
  reservationId String
  rez           Reservation?
  cancels       Cancellation[]

  @@map("seats")
}

enum SeatStatus {
  FREE
  LOCKED
  RESERVED
}

model Reservation {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  consumer   Consumer @relation(fields: [consumerId], references: [id])
  consumerId String
  Seat       Seat?    @relation(fields: [seatId], references: [id])
  seatId     String   @unique

  @@map("reservations")
}

model Cancellation {
  id         String   @id @default(cuid())
  reason     String
  createdAt  DateTime @default(now())
  consumer   Consumer @relation(fields: [consumerId], references: [id])
  consumerId String
  seat       Seat     @relation(fields: [seatId], references: [id])
  seatId     String

  @@map("cancellations")
}
