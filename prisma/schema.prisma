// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CONSUMER
  ADMIN
  OPERATOR
}

model Credential {
  id       String    @id @default(cuid())
  uname    String?   @unique
  email    String?   @unique
  passwd   String
  userType UserType
  Consumer Consumer?
  Operator Operator?

  @@map("credentials")
}

model Consumer {
  id       String    @id @default(cuid())
  name     String
  dob      DateTime  @db.Date
  gender   String
  phone    String
  Bookings Booking[]

  Credential   Credential @relation(fields: [credentialId], references: [id])
  credentialId String     @unique

  @@map("consumers")
}

model Application {
  id           String   @id @default(cuid())
  companyName  String
  companyEmail String
  files        String[]
  createdAt    DateTime @default(now())
}

model Operator {
  id                String     @id @default(cuid())
  name              String     @unique
  registrationEmail String     @unique
  logo              String?
  background        String?
  supportContacts   String[]
  Credential        Credential @relation(fields: [credentialId], references: [id])
  credentialId      String     @unique
  Trips             Trip[]
  // PayoutRequests    PayoutRequest[]

  @@map("operators")
}

enum TripStatus {
  IDLE
  LAUNCHED
  WITHDRAWN
}

model Trip {
  id                String     @id @default(cuid())
  name              String
  departureLocation String
  arrivalLocation   String
  intermediateStops String[]
  distance          Float?
  departureTime     DateTime
  arrivalTime       DateTime
  price             Decimal    @db.Money
  amenities         String[]
  additional        String?
  status            TripStatus @default(IDLE)

  operatorId String
  Operator   Operator @relation(fields: [operatorId], references: [id])
  Seats      Seat[]

  @@map("trips")
}

enum SeatStatus {
  FREE
  LOCKED
  BOOKED
}

model Seat {
  id         String       @id @default(cuid())
  number     String
  location   String[]
  features   String[]
  additional String?
  status     SeatStatus   @default(FREE)
  Trip       Trip         @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId     String
  BookedSeat BookedSeat[]

  @@map("seats")
}

model BookedSeat {
  Seat      Seat    @relation(fields: [seatId], references: [id])
  Booking   Booking @relation(fields: [bookingId], references: [id])
  seatId    String
  bookingId String

  @@id([seatId, bookingId])
}

model Booking {
  id             String       @id @default(cuid())
  isCanceled     Boolean      @default(false)
  totalAmount    Decimal      @db.Money
  taxRate        Float
  commissionRate Float
  bookedAt       DateTime     @default(now())
  cancelAt       DateTime     @updatedAt
  Consumer       Consumer     @relation(fields: [consumerId], references: [id])
  consumerId     String
  BookedSeat     BookedSeat[]

  @@map("bookings")
}

model Settings {
  id              String   @id @default(cuid())
  taxRate         Float
  commissionRate  Float
  refundTimeFrame Int
  tocFile         String
  policyFile      String
  createdAt       DateTime @default(now())

  @@map("settings")
}

// model PayoutRequest {
//   id          String   @id @default(cuid())
//   isPaid      Boolean  @default(false)
//   amount      Decimal  @db.Money
//   requestedAt DateTime @default(now())
//   paidAt      DateTime @updatedAt
//   Operator    Operator @relation(fields: [operatorId], references: [id])
//   operatorId  String

//   @@map("payout_requests")
// }
