// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CONSUMER
  ADMIN
  OPERATOR
}

model Credential {
  id                String             @id @default(cuid())
  uname             String?            @unique
  email             String?            @unique
  passwd            String
  userType          UserType
  Consumer          Consumer?
  Admin             Admin?
  OperatorPersonnel OperatorPersonnel?

  @@map("credentials")
}

model Consumer {
  id       String    @id @default(cuid())
  name     String
  dob      DateTime  @db.Date
  gender   String
  phone    String
  Bookings Booking[]

  Credential   Credential @relation(fields: [credentialId], references: [id])
  credentialId String     @unique

  @@map("consumers")
}

model Admin {
  id           String     @id @default(cuid())
  Credential   Credential @relation(fields: [credentialId], references: [id])
  credentialId String     @unique

  @@map("admins")
}

model OperatorPersonnel {
  id           String     @id @default(cuid())
  Credential   Credential @relation(fields: [credentialId], references: [id])
  credentialId String     @unique
  Operator     Operator?  @relation(fields: [operatorId], references: [id])
  operatorId   String?

  @@map("operator_personnel")
}

model Operator {
  id                String              @id @default(cuid())
  name              String              @unique
  registrationEmail String              @unique
  logo              String?
  background        String?
  supportContacts   String[]
  Associates        OperatorPersonnel[]
  Trips             Trip[]
  Transactions      Transaction[]
  PayoutRequests    PayoutRequest[]

  @@map("operators")
}

enum TripStatus {
  IDLE
  LAUNCHED
  WITHDRAWN
}

model Trip {
  id                String     @id @default(cuid())
  name              String
  departureLocation String
  arrivalLocation   String
  intermediateStops String[]
  distance          Float?
  departureTime     DateTime
  arrivalTime       DateTime
  price             Decimal    @db.Money
  amenities         String[]
  additional        String?
  status            TripStatus @default(IDLE)

  operatorId String
  Operator   Operator @relation(fields: [operatorId], references: [id])
  Seats      Seat[]

  @@map("trips")
}

enum SeatStatus {
  FREE
  LOCKED
  BOOKED
}

model Seat {
  id         String     @id @default(cuid())
  number     String
  location   String[]
  features   String[]
  additional String?
  status     SeatStatus @default(FREE)
  Trip       Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId     String
  Booking    Booking?   @relation(fields: [bookingId], references: [id])
  bookingId  String?

  @@map("seats")
}

model Booking {
  id          String       @id @default(cuid())
  isCanceled  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  Seats       Seat[]
  Consumer    Consumer     @relation(fields: [consumerId], references: [id])
  consumerId  String
  Transaction Transaction?

  @@map("bookings")
}

model Transaction {
  id         String   @id @default(cuid())
  amount     Decimal  @db.Money
  createdAt  DateTime @default(now())
  Operator   Operator @relation(fields: [operatorId], references: [id])
  operatorId String
  Booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  String   @unique

  @@map("transactions")
}

model PayoutRequest {
  id         String   @id @default(cuid())
  amount     Decimal  @db.Money
  createdAt  DateTime @default(now())
  Operator   Operator @relation(fields: [operatorId], references: [id])
  operatorId String

  @@map("payout_requests")
}
