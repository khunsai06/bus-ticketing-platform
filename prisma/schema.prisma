// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CONSUMER
  ADMIN
  PARTNER
}

model Credential {
  id       String    @id @default(cuid())
  uname    String    @unique
  passwd   String
  userType UserType
  partner  Partner?
  consumer Consumer?
  admin    Admin?

  @@map("credentials")
}

model Consumer {
  id                String     @id @default(cuid())
  cid               String     @unique
  registrationEmail String     @unique
  credential        Credential @relation(fields: [cid], references: [id])
}

model Admin {
  id         String     @id @default(cuid())
  cid        String     @unique
  credential Credential @relation(fields: [cid], references: [id])
}

model Partner {
  id         String     @id @default(cuid())
  cid        String     @unique
  credential Credential @relation(fields: [cid], references: [id])
  operatorId String
  operator   Operator   @relation(fields: [operatorId], references: [id])

  @@map("partners")
}

model Operator {
  id                  String    @id @default(cuid())
  name                String    @unique
  registrationEmail   String    @unique
  logo                Bytes?    @db.ByteA
  background          String?
  supportEmails       String[]
  supportPhoneNumbers String[]
  associates          Partner[]
  trips               Trip[]

  @@map("operators")
}

model Trip {
  id                String     @id @default(cuid())
  title             String
  departureLocation String
  arrivalLocation   String
  intermediateStops String?
  distance          Float?
  departureTime     DateTime
  arrivalTime       DateTime
  price             Decimal
  additional        String?
  status            TripStatus @default(IDLE)

  operatorId String
  operator   Operator @relation(fields: [operatorId], references: [id])
  seats      Seat[]

  @@map("trips")
}

enum TripStatus {
  IDLE
  LAUNCHED
  WITHDRAWN
}

model Seat {
  id          String  @id @default(cuid())
  identifier  String
  isAvailable Boolean @default(true)
  additional  String?
  tripId      String
  trip        Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("seats")
}
